// left to do:
// *
// Shift + *
// Ctrl + <

thectx.keys = {};

thectx.keys.listOfAllKeys = {};

class keyObject {
  constructor(text, activationKey, activationCtrl, youtubeLink, longText) {
    this.text = text;
    this.activationKey = activationKey;
    this.activationCtrl = activationCtrl;
    this.origActKey = activationKey;
    this.origActivCtrl = activationCtrl;
    this.youtubeLink = youtubeLink;
    this.longText = longText;

    thectx.keys.listOfAllKeys[text] = [activationKey, activationCtrl];
  }

  matchesEvent(evt, keyup = false) {
    if (keyup) {
      //doesn't need to be correct control status and accepts lower/upper case
      return (
        evt.key == this.activationKey ||
        evt.key == this.activationKey.toUpperCase() ||
        evt.key == this.activationKey.toLowerCase()
      );
    } else {
      return (
        evt.key == this.activationKey && evt.ctrlKey == this.activationCtrl
      );
    }
  }

  changeActivation(newActKey, newActCtrl) {
    var keys = Object.keys(thectx.keys.listOfAllKeys);

    for (var i = 0; i < keys.length; i++) {
      var val = thectx.keys.listOfAllKeys[keys[i]];
      if (val[0] == newActKey && val[1] == newActCtrl && keys[i] != this.text) {
        document.exitPointerLock();
        alert(
          `Didn't change because function \n"` +
            keys[i] +
            `"\n has this key command`
        );
        return;
      }
    }

    this.activationKey = newActKey;
    this.activationCtrl = newActCtrl;

    thectx.keys.listOfAllKeys[this.text] = [
      this.activationKey,
      this.activationCtrl
    ];
  }
}

createKeyBindingText = function(text) {
  let textInsert = document.createElement("div");
  textInsert.innerHTML = text;
  textInsert.style.padding = "15px 5px 5px 5px";
  textInsert.style.fontWeight = "bold";
  textInsert.style.fontSize = "30px";
  //textInsert.style.fontFamily = "monospace";

  let target = document.getElementById("controlsModalContent");
  let keybindingsElement = document.getElementById("Keybindings");
  target.insertBefore(textInsert, keybindingsElement);
};

createKeyBindingText("KEYBOARD SHORTCUTS (changeable)");
createKeyBindingText(" ");
createKeyBindingText(" ");

//POINTER
createKeyBindingText("Pointer");

thectx.keys.increasePointerSize = new keyObject(
  (text = "Increase pointer size"),
  (activationKey = "w"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to increase the pointer/ROI size")
);
createKeyBinding(thectx.keys.increasePointerSize);

thectx.keys.decreasePointerSize = new keyObject(
  (text = "Decrease pointer size"),
  (activationKey = "s"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to decrease the pointer/ROI size")
);
createKeyBinding(thectx.keys.decreasePointerSize);

thectx.keys.increasePointerOpacity = new keyObject(
  (text = "Increase pointer opacity"),
  (activationKey = "D"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to increase the pointer opacity")
);
createKeyBinding(thectx.keys.increasePointerOpacity);

thectx.keys.decreasePointerOpacity = new keyObject(
  (text = "Decrease pointer opacity"),
  (activationKey = "A"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to decrease the pointer opacity")
);
createKeyBinding(thectx.keys.decreasePointerOpacity);

thectx.keys.pointerInfo = new keyObject(
  (text = "Pointer info"),
  (activationKey = "i"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Shows more info about the values/voxels that are within the pointer")
);
createKeyBinding(thectx.keys.pointerInfo);

//MASKS
createKeyBindingText("Mask");

thectx.keys.showHideMask = new keyObject(
  (text = "Hide/show mask"),
  (activationKey = "f"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Flips mask opacity on/off")
);
createKeyBinding(thectx.keys.showHideMask);

thectx.keys.increaseMaskOpacity = new keyObject(
  (text = "Increase mask opacity"),
  (activationKey = "d"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to increase the mask opacity")
);
createKeyBinding(thectx.keys.increaseMaskOpacity);

thectx.keys.decreaseMaskOpacity = new keyObject(
  (text = "Decrease mask opacity"),
  (activationKey = "a"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Press and hold button to decrease the mask opacity")
);
createKeyBinding(thectx.keys.decreaseMaskOpacity);

thectx.keys.nextLabelLock = new keyObject(
  (text = "Next label"),
  (activationKey = "e"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Selects the next label and locks the current. If next label not present, it gets created.")
);
createKeyBinding(thectx.keys.nextLabelLock);

thectx.keys.previousLabelLock = new keyObject(
  (text = "Previous label"),
  (activationKey = "q"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Selects the previous label and locks the current.")
);
createKeyBinding(thectx.keys.previousLabelLock);

thectx.keys.nextLabelNoLock = new keyObject(
  (text = "Next label without locking current"),
  (activationKey = "E"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Selects the next label without locking the current. If next label not present, it gets created.")
);
createKeyBinding(thectx.keys.nextLabelNoLock);

thectx.keys.previousLabelNoLock = new keyObject(
  (text = "Previous label without locking current"),
  (activationKey = "Q"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Selects the previous label without locking the current.")
);
createKeyBinding(thectx.keys.previousLabelNoLock);

//MANUAL SEGMENTATION
createKeyBindingText("Manual segmentation");

thectx.keys.DeleteSlice = new keyObject(
  (text = "Delete segmentation on current slice"),
  (activationKey = "Delete"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Deletes unlocked segmentation(s) of the current slice.")
);
createKeyBinding(thectx.keys.DeleteSlice);

thectx.keys.Undo = new keyObject(
  (text = "Undo (2D)"),
  (activationKey = "z"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText =
    "Undo the last 2d segmentation. Only works once and has to be used on the same slice as the last change.")
);
createKeyBinding(thectx.keys.Undo);

//THRESHOLDING
//createKeyBindingText("Thresholding");

thectx.keys.ThresholdingOnOff = new keyObject(
  (text = "Thresholding on/off"),
  (activationKey = "t"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Switches thresholding on and off")
);
createKeyBinding(thectx.keys.ThresholdingOnOff);

thectx.keys.ThresholdingSetMin = new keyObject(
  (text = "Thresholding minimum = pointer mean"),
  (activationKey = "-"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText =
    "The pointer mean value (average of voxel values within the pointer) becomes the minimum thresholding value. You can try hoding the button pressed while moving the pointer around to see how the thresholding value will change.")
);
createKeyBinding(thectx.keys.ThresholdingSetMin);

thectx.keys.ThresholdingSetMax = new keyObject(
  (text = "Thresholding maximum = pointer mean"),
  (activationKey = "+"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "The pointer mean value (average of voxel values within the pointer) becomes the maximum thresholding value. You can try hoding the button pressed while moving the pointer around to see how the thresholding value will change.")
);
createKeyBinding(thectx.keys.ThresholdingSetMax);

thectx.keys.fill2D = new keyObject(
  (text = "2D fill"),
  (activationKey = "<"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "fill 2D island originating from the center of your cursor")
);
createKeyBinding(thectx.keys.fill2D);

thectx.keys.fill3D = new keyObject(
  (text = "3D fill"),
  (activationKey = ">"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "fill 3D island originating from the center of your cursor. Be careful, there is no undo for 3d.")
);
createKeyBinding(thectx.keys.fill3D);

//AUTOMATIC SEGMENTATION
createKeyBindingText("Automatic segmentation");

thectx.keys.predictSlice = new keyObject(
  (text = "Predict slice"),
  (activationKey = " "),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Predict the current slice using a loaded 2D model")
);
createKeyBinding(thectx.keys.predictSlice);

thectx.keys.predictAllSlices = new keyObject(
  (text = "Predict all slices"),
  (activationKey = "P"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText =
    "Predict all slices using a loaded 2D model. Note - may take long time and the only way to abort is to shut off MedSeg.")
);
createKeyBinding(thectx.keys.predictAllSlices);

thectx.keys.deepGrowOnOff = new keyObject(
  (text = "DeepGrow on/off"),
  (activationKey = "g"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText =
    "Switches between DeepGrow and regular segmentation modes. Place DeepGrow clicks by pressing the left and right mouse buttons. The clicks can be moved while holding the mouse button pressed.")
);
createKeyBinding(thectx.keys.deepGrowOnOff);

thectx.keys.predictSliceBelow = new keyObject(
  (text = "Predict slice below"),
  (activationKey = "c"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Switches to and predicts the slice below the current.")
);
createKeyBinding(thectx.keys.predictSliceBelow);

thectx.keys.predictSliceAbove = new keyObject(
  (text = "Predict slice above"),
  (activationKey = "x"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Switches to and predicts the slice above the current.")
);
createKeyBinding(thectx.keys.predictSliceAbove);

thectx.keys.roiRectangle = new keyObject(
  (text = "ROI rectangle (for ROI models)"),
  (activationKey = ","),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText =
    "Note that the ROI model will not work with rotated or left/right flipped images.")
);
createKeyBinding(thectx.keys.roiRectangle);

thectx.keys.errorSegPoint = new keyObject(
  (text = "Point for experimental ErrorSeg"),
  (activationKey = "."),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText =
    "Main model is made for pancreas on CT. Write us to dlinradiology@gmail.com if you want to try it.")
);
createKeyBinding(thectx.keys.errorSegPoint);

//WINDOWING
createKeyBindingText("Windowing");

thectx.keys.CTMediastinumWindowing = new keyObject(
  (text = "CT mediastinum window"),
  (activationKey = "1"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "Window level 60, window width 350")
);
createKeyBinding(thectx.keys.CTMediastinumWindowing);

thectx.keys.CTBrainWindowing = new keyObject(
  (text = "CT brain window"),
  (activationKey = "2"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level 40, window width 80")
);
createKeyBinding(thectx.keys.CTBrainWindowing);

thectx.keys.CTLungsWindowing = new keyObject(
  (text = "CT lungs window"),
  (activationKey = "3"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level -450, window width 1500")
);
createKeyBinding(thectx.keys.CTLungsWindowing);

thectx.keys.CTSoftTissueWindowing = new keyObject(
  (text = "CT soft tissue window"),
  (activationKey = "4"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level 50, window width 450")
);
createKeyBinding(thectx.keys.CTSoftTissueWindowing);

thectx.keys.CTBoneWindowing = new keyObject(
  (text = "CT bone window"),
  (activationKey = "5"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level 350, window width 2000")
);
createKeyBinding(thectx.keys.CTBoneWindowing);

thectx.keys.sliceWindowing = new keyObject(
  (text = "Min/max of current slice window"),
  (activationKey = "6"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level and window width set accoring to the current slice")
);
createKeyBinding(thectx.keys.sliceWindowing);

thectx.keys.pointerWindowing = new keyObject(
  (text = "Min/max of pointer window"),
  (activationKey = "7"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText = "Window level and window width set accoring to the ROI/pointer")
);
createKeyBinding(thectx.keys.pointerWindowing);

thectx.keys.windowingOnOff = new keyObject(
  (text = "Activate/deactivate windowing"),
  (activationKey = "ArrowRight"),
  (activationCtrl = false),
  (youtubeLink = "none"),
  (longText =
    "This button is an alternative when the user doesn't have the scroll wheel available.")
);
createKeyBinding(thectx.keys.windowingOnOff);

//DATA VIEW
createKeyBindingText("Data view");

thectx.keys.resetView = new keyObject(
  (text = "Reset zoom and pan"),
  (activationKey = "r"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Resets zoom and pan, keeps the windowing, rotation and mirroring unchanged. Windowing can be reset with the function called Min/max of current slice window")
);
createKeyBinding(thectx.keys.resetView);

thectx.keys.fullResetView = new keyObject(
  (text = "Full view reset"),
  (activationKey = "R"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Resets any zoom, pan, windowing, rotation, and mirroring.")
);
createKeyBinding(thectx.keys.fullResetView);

thectx.keys.axialPlane = new keyObject(
  (text = "Axis 0 (original) MPR"),
  (activationKey = "F9"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Changes to original MPR")
);
createKeyBinding(thectx.keys.axialPlane);

thectx.keys.coronalPlane = new keyObject(
  (text = "Axis 1 MPR"),
  (activationKey = "F10"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Changes to coronal MPR (assuming originally axial slices of loaded volume). Takes some time, depending on the size of loaded volume.")
);
createKeyBinding(thectx.keys.coronalPlane);

thectx.keys.sagittalPlane = new keyObject(
  (text = "Axis 2 MPR"),
  (activationKey = "F11"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Changes to sagittal MPR (assuming originally axial slices of loaded volume). Takes some time, depending on the size of loaded volume.")
);
createKeyBinding(thectx.keys.sagittalPlane);

thectx.keys.sliceUp = new keyObject(
  (text = "One slice up"),
  (activationKey = "ArrowUp"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "As an alternative to the scroll, you can use this button to move between slices.")
);
createKeyBinding(thectx.keys.sliceUp);

thectx.keys.sliceDown = new keyObject(
  (text = "One slice down"),
  (activationKey = "ArrowDown"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "As an alternative to the scroll, you can use this button to move between slices.")
);
createKeyBinding(thectx.keys.sliceDown);

//OTHER FUNCTIONS
createKeyBindingText("Other functions");

thectx.keys.f1Info = new keyObject(
  (text = "Info about the volume and view"),
  (activationKey = "F1"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText =
    "Shows more info about the loaded volume and the selected display settings. Useful for viewing the slice nr. before starting AI models on selected slices.")
);
createKeyBinding(thectx.keys.f1Info);

thectx.keys.ruler = new keyObject(
  (text = "Distance ruler"),
  (activationKey = "æ"),
  (activationCtrl = false),
  (youtubeLink = "http:.asdasdfad.com/dgg"),
  (longText = "Activates/deactivates a temporary distance ruler in mm.")
);
createKeyBinding(thectx.keys.ruler);

thectx.keys.openGDrive = new keyObject(
  (text = "Open from Google Drive"),
  (activationKey = "o"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText =
    "Opens niftis from Google Drive. The user needs to be registered as this is still under development. Write an email to dlinradiology@gmail.com if you want us to add your google login.")
);
createKeyBinding(thectx.keys.openGDrive);

thectx.keys.uploadGDrive = new keyObject(
  (text = "Upload/save to Google Drive"),
  (activationKey = "u"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText =
    "Saves mask to Google Drive. Select the folder that you want to save to. Currently not possible to overwrite files. The user needs to be registered as this is still under development. Write an email to dlinradiology@gmail.com if you want us to add your google login.")
);
createKeyBinding(thectx.keys.uploadGDrive);

//NOT SHOWN DUE TO OBSCURITY
thectx.keys.liversplit = new keyObject(
  (text = "Liver mask split to subsegments"),
  (activationKey = "L"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText = "")
);

thectx.keys.MPRMode = new keyObject(
  (text = "MPR Mode (only partly functioning)"),
  (activationKey = "="),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText =
    "Use by holding Ctrl+left mouse button pressed and moving the mouse")
);

thectx.keys.fillIslands = new keyObject(
  (text = "Fill islands"),
  (activationKey = "<"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText = "Fills all islands on current slice.")
);

thectx.keys.removeOtherIslands2D = new keyObject(
  (text = "Remove other islands 2D"),
  (activationKey = "*"),
  (activationCtrl = false),
  (youtubeLink = ""),
  (longText = "")
);

thectx.keys.removeOtherIslands3D = new keyObject(
  (text = "Remove other islands 3D"),
  (activationKey = "*"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText = "")
);

thectx.keys.openFolder = new keyObject(
  (text = "Open series UID prompt"),
  (activationKey = "ø"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText = "")
);

thectx.keys.dontSegmentZero = new keyObject(
  (text = "Switch don't segment zero on/off"),
  (activationKey = "f"),
  (activationCtrl = true),
  (youtubeLink = ""),
  (longText = "")
);

function createKeyBinding(key) {
  //key is an object in thectx.Keys
  //it has:
  //* text:text to be displayed
  //* activationKey = activation key (f.ex. "a")
  //* activationCtrl = Ctrl status, bool

  // Future development:
  // *youtube link
  // *more info on hover

  //Place the created Keybinding

  let text = key.text;
  let activationKey = key.activationKey;
  let activationCtrl = key.activationCtrl;
  let longText = key.longText;

  let keyBindingDiv = document.createElement("div");

  keyBindingDiv.style.position = "relative";
  //keyBindingDiv.style.backgroundColor = "rgb(0,0,0,0.2)";
  keyBindingDiv.style.padding = "2px";
  keyBindingDiv.style.width = "600px";
  keyBindingDiv.style.height = "20px";
  //keyBindingDiv.style.border = "2px solid rgb(0, 120, 155)";
  keyBindingDiv.style.left = "0px";
  keyBindingDiv.style.margin = "5px";

  let textElement = document.createElement("text");
  textElement.innerHTML = text;
  textElement.setAttribute("title", longText);
  textElement.style.backgroundColor = "rgb(100,184,210,1)";
  //textElement.style.textShadow = "0px 0px 3px black";
  //textElement.style.fontWeight = "bold";
  textElement.style.fontSize = "20px";
  //textElement.style.top = "10px";
  textElement.style.width = "390px";
  textElement.style.position = "absolute";
  textElement.style.overflow = "hidden";
  textElement.style.textAlign = "right";
  textElement.style.textOverflow = "ellipsis";
  textElement.style.whiteSpace = "nowrap";
  //textElement.setAttribute("class", "clickableImage");

  keyBindingDiv.appendChild(textElement);

  let keyElement = document.createElement("text");
  let keyElementText = "";

  if (activationCtrl) {
    keyElementText += "Ctrl + ";
  }
  if (activationKey == " ") {
    keyElementText += "Space";
  } else {
    keyElementText += activationKey;
  }
  keyElement.innerHTML = keyElementText;

  keyElement.style.backgroundColor = "rgb(100,184,210,1)";
  //textElement.style.textShadow = "0px 0px 3px black";
  //textElement.style.fontWeight = "bold";
  keyElement.style.fontSize = "20px";
  //keyElement.style.top = "10px";
  keyElement.style.right = "0px";
  keyElement.style.width = "200px";
  keyElement.style.position = "absolute";
  keyElement.style.overflow = "hidden";
  keyElement.style.textAlign = "center";
  keyElement.style.textOverflow = "ellipsis";
  keyElement.style.whiteSpace = "nowrap";
  keyElement.setAttribute("class", "clickableImage");

  keyBindingDiv.appendChild(keyElement);

  keyElement.onclick = function(evt) {
    document.addEventListener("keydown", onKeyHandler);
    vis_canvas.requestPointerLock();

    keyElement.innerHTML = "Press a key";
    keyElement.style.backgroundColor = "rgb(50,134,160,1)";

    function onKeyHandler(e) {
      e.preventDefault();
      e.stopPropagation();

      if (
        e.key != "Shift" &&
        e.key != "Control" &&
        e.key != "Alt" &&
        e.key != "AltGraph"
      ) {
        //need to add possibility for mouse buttons

        newActKey = e.key;
        newCtrlStatus = e.ctrlKey;

        key.changeActivation(newActKey, newCtrlStatus);

        keyElementText = "";
        if (key.activationCtrl) {
          keyElementText += "Ctrl + ";
        }
        if (key.activationKey == " ") {
          keyElementText += "Space";
        } else {
          keyElementText += key.activationKey;
        }
        keyElement.innerHTML = keyElementText;

        document.removeEventListener("keydown", onKeyHandler);
        //document.removeEventListener("mousedown", onKeyHandler);
        document.exitPointerLock();
        keyElement.style.backgroundColor = "rgb(100,184,210,1)";
      }
    }

    //document.exitPointerLock()
  };

  let target = document.getElementById("controlsModalContent");
  let keybindingsElement = document.getElementById("Keybindings");
  target.insertBefore(keyBindingDiv, keybindingsElement);
}
//
