// The Browser API key obtained from the Google API Console.
// Replace with your own Browser API key, or your own key.
var developerKey = "AIzaSyCSX7J4kHxwBBq-zNPpW7z-JGdX4J7knv4";

// The Client ID obtained from the Google API Console. Replace with your own Client ID.
var clientId =
  "405360998127-htb11493fucfdfp1o7oj0f1o3kb68l1b.apps.googleusercontent.com";

// Replace with your own project number from console.developers.google.com.
// See "Project number" under "IAM & Admin" > "Settings"
var appId = "405360998127";

// Scope to use to access user's Drive items.
var scope = ["https://www.googleapis.com/auth/drive.file"];

var pickerApiLoaded = false;
var oauthToken;

let googleAPILoadType;

// Use the Google API Loader script to load the google.picker script.
function loadPicker() {
  gapi.load("auth", { callback: onAuthApiLoad });
  gapi.load("picker", { callback: onPickerApiLoad });
}

function onAuthApiLoad() {
  window.gapi.auth.authorize(
    {
      client_id: clientId,
      scope: scope,
      immediate: false
    },
    handleAuthResult
  );
}

function onPickerApiLoad() {
  pickerApiLoaded = true;
}

function handleAuthResult(authResult) {
  if (authResult && !authResult.error) {
    oauthToken = authResult.access_token;
    createPicker();
  }
}

function createPicker() {
  if (pickerApiLoaded && oauthToken && googleAPILoadType == "load") {
    var view = new google.picker.DocsView(
      google.picker.ViewId.DOCS
    ).setIncludeFolders(true);

    var picker = new google.picker.PickerBuilder()
      .enableFeature(google.picker.Feature.NAV_HIDDEN)
      //.enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
      .setAppId(appId)
      .setOAuthToken(oauthToken)
      .addView(view)
      //.addView(new google.picker.DocsUploadView())
      .setDeveloperKey(developerKey)
      //.setCallback(onPickerAction)
      .setCallback(pickerCallback)
      .build();
    picker.setVisible(true);
  } else if (pickerApiLoaded && oauthToken && googleAPILoadType == "upload") {
    var view = new google.picker.DocsView()
      .setIncludeFolders(true)
      .setMimeTypes("application/vnd.google-apps.folder")
      .setSelectFolderEnabled(true);

    var picker = new google.picker.PickerBuilder()
      .setAppId(appId)
      .setOAuthToken(oauthToken)
      .addView(view)
      .setDeveloperKey(developerKey)
      .setCallback(uploadpickerCallback)
      .build();
    picker.setVisible(true);
  }
}
function uploadpickerCallback(data) {
  if (data.action == google.picker.Action.PICKED) {
    var folderId = data.docs[0].id;

    let blob;
    let fileName;
    exportMask(thectx);
    var saveData = (function() {
      return function(data, fileName) {
        if (saveAsGZ) {
          var a2 = new Uint8Array(data[0]);
          var b = new Uint8Array(data[1]);
          var c = new Uint8Array(a2.length + b.length);
          c.set(a2);
          c.set(b, a2.length);
          c = nifti.compress(c);
          blob = new Blob([c]);
        } else {
          blob = new Blob(data);
        }
      };
    })();

    var data = [
      new Uint8Array(temp_nii_header, 0, temp_nii_header.length),
      new Uint8Array(thectx.maskImage, 0, thectx.maskImage.length)
    ];

    fileName = "mask" + thectx.fileName + ".nii";
    if (saveAsGZ) {
      fileName += ".gz";
    }

    saveData(data, fileName);

    var file = blob;
    var metadata = {
      name: fileName, // Filename at Google Drive
      mimeType: "application/octet-stream", // mimeType at Google Drive
      parents: [folderId] // Folder ID at Google Drive
    };

    var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.
    var form = new FormData();
    form.append(
      "metadata",
      new Blob([JSON.stringify(metadata)], { type: "application/json" })
    );
    form.append("file", file);

    var xhr = new XMLHttpRequest();
    xhr.open(
      "post",
      "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id"
    );
    xhr.setRequestHeader("Authorization", "Bearer " + accessToken);
    xhr.responseType = "json";
    xhr.onload = () => {
      console.log("Upload complete");
      document.activeElement.blur();
      //console.log(xhr.response.id); // Retrieve uploaded file ID.
    };
    xhr.send(form);
  }
}
/*
function onPickerAction(data) {
  if (data.action === google.picker.Action.PICKED) {
    document.activeElement.blur();
    var id = data.docs[0].id;
    var request = new XMLHttpRequest();
    request.open("GET", "https://www.googleapis.com/drive/v2/files/" + id);
    request.setRequestHeader(
      "Authorization",
      "Bearer " + gapi.auth.getToken().access_token
    );
    request.responseType = "blob";

    request.addEventListener("load", function() {
      //var item = JSON.parse(request.responseText);
      r = request;
      //console.log(item);
      //console.log(request);
    });

    request.send();
  }
}
*/

// A simple callback implementation.
function pickerCallback(data) {
  if (data.action == google.picker.Action.PICKED) {
    var fileId = data.docs[0].id;
    try {
      thectx.fileName = data.docs[0].name.split(".nii")[0];
    } catch {
      thectx.fileName = data.docs[0].name;
    }

    //console.log("The file selected: " + fileId);

    gapi.client.drive.files
      .get({
        fileId: fileId,
        alt: "media"
      })
      .then(function(response) {
        let binary = response.body;

        let l = binary.length;
        let array = new Uint8Array(l);
        for (var i = 0; i < l; i++) {
          array[i] = binary.charCodeAt(i);
        }
        let blob = new Blob([array], {
          type: "application/octet-stream"
        });

        readNiiFile(blob);
        document.activeElement.blur();
        /* 
        //TO DOWNLOAD FILE
        let url = window.URL.createObjectURL(blob);

        let a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        a.href = url;
        a.download = "asd";
        a.click();

        window.URL.revokeObjectURL(url);
        console.log(response);
        */
      });
  }
}

//
//

const CLIENT_ID =
  "405360998127-htb11493fucfdfp1o7oj0f1o3kb68l1b.apps.googleusercontent.com";
const API_KEY = "AIzaSyCSX7J4kHxwBBq-zNPpW7z-JGdX4J7knv4";

// Discovery doc URL for APIs used by the quickstart
const DISCOVERY_DOC =
  "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest";

function gapiLoaded() {
  gapi.load("client", intializeGapiClient);
}

async function intializeGapiClient() {
  await gapi.client.init({
    apiKey: API_KEY,
    discoveryDocs: [DISCOVERY_DOC]
  });
  gapiInited = true;
  //maybeEnableButtons();
}
